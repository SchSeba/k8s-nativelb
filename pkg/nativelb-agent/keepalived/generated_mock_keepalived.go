// Code generated by MockGen. DO NOT EDIT.
// Source: keepalived.go

// Package keepalived is a generated GoMock package.
package keepalived

import (
	gomock "github.com/golang/mock/gomock"
	proto "github.com/k8s-nativelb/pkg/proto"
	reflect "reflect"
)

// MockKeepalivedInterface is a mock of KeepalivedInterface interface
type MockKeepalivedInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKeepalivedInterfaceMockRecorder
}

// MockKeepalivedInterfaceMockRecorder is the mock recorder for MockKeepalivedInterface
type MockKeepalivedInterfaceMockRecorder struct {
	mock *MockKeepalivedInterface
}

// NewMockKeepalivedInterface creates a new mock instance
func NewMockKeepalivedInterface(ctrl *gomock.Controller) *MockKeepalivedInterface {
	mock := &MockKeepalivedInterface{ctrl: ctrl}
	mock.recorder = &MockKeepalivedInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeepalivedInterface) EXPECT() *MockKeepalivedInterfaceMockRecorder {
	return m.recorder
}

// GetPid mocks base method
func (m *MockKeepalivedInterface) GetPid() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPid")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetPid indicates an expected call of GetPid
func (mr *MockKeepalivedInterfaceMockRecorder) GetPid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPid", reflect.TypeOf((*MockKeepalivedInterface)(nil).GetPid))
}

// WriteConfig mocks base method
func (m *MockKeepalivedInterface) WriteConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteConfig indicates an expected call of WriteConfig
func (mr *MockKeepalivedInterfaceMockRecorder) WriteConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteConfig", reflect.TypeOf((*MockKeepalivedInterface)(nil).WriteConfig))
}

// NewFarmForInstance mocks base method
func (m *MockKeepalivedInterface) NewFarmForInstance(arg0 *proto.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFarmForInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewFarmForInstance indicates an expected call of NewFarmForInstance
func (mr *MockKeepalivedInterfaceMockRecorder) NewFarmForInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFarmForInstance", reflect.TypeOf((*MockKeepalivedInterface)(nil).NewFarmForInstance), arg0)
}

// DeleteFarmInInstance mocks base method
func (m *MockKeepalivedInterface) DeleteFarmInInstance(arg0 *proto.Data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFarmInInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFarmInInstance indicates an expected call of DeleteFarmInInstance
func (mr *MockKeepalivedInterfaceMockRecorder) DeleteFarmInInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFarmInInstance", reflect.TypeOf((*MockKeepalivedInterface)(nil).DeleteFarmInInstance), arg0)
}

// BuildIpsFromFarmsForNamespace mocks base method
func (m *MockKeepalivedInterface) BuildIpsFromFarmsForNamespace(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BuildIpsFromFarmsForNamespace", arg0)
}

// BuildIpsFromFarmsForNamespace indicates an expected call of BuildIpsFromFarmsForNamespace
func (mr *MockKeepalivedInterfaceMockRecorder) BuildIpsFromFarmsForNamespace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildIpsFromFarmsForNamespace", reflect.TypeOf((*MockKeepalivedInterface)(nil).BuildIpsFromFarmsForNamespace), arg0)
}

// LoadInitData mocks base method
func (m *MockKeepalivedInterface) LoadInitData(arg0 *proto.InitAgentData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadInitData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadInitData indicates an expected call of LoadInitData
func (mr *MockKeepalivedInterfaceMockRecorder) LoadInitData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadInitData", reflect.TypeOf((*MockKeepalivedInterface)(nil).LoadInitData), arg0)
}

// StartEngine mocks base method
func (m *MockKeepalivedInterface) StartEngine() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEngine")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartEngine indicates an expected call of StartEngine
func (mr *MockKeepalivedInterfaceMockRecorder) StartEngine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEngine", reflect.TypeOf((*MockKeepalivedInterface)(nil).StartEngine))
}

// ReloadEngine mocks base method
func (m *MockKeepalivedInterface) ReloadEngine() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadEngine")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadEngine indicates an expected call of ReloadEngine
func (mr *MockKeepalivedInterfaceMockRecorder) ReloadEngine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadEngine", reflect.TypeOf((*MockKeepalivedInterface)(nil).ReloadEngine))
}

// StopEngine mocks base method
func (m *MockKeepalivedInterface) StopEngine() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopEngine")
}

// StopEngine indicates an expected call of StopEngine
func (mr *MockKeepalivedInterfaceMockRecorder) StopEngine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEngine", reflect.TypeOf((*MockKeepalivedInterface)(nil).StopEngine))
}
