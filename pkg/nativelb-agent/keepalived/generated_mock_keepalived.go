// Code generated by MockGen. DO NOT EDIT.
// Source: keepalived.go

// Package keepalived is a generated GoMock package.
package keepalived

import (
	gomock "github.com/golang/mock/gomock"
	proto "github.com/k8s-nativelb/pkg/proto"
	reflect "reflect"
)

// MockKeepalivedInterface is a mock of KeepalivedInterface interface
type MockKeepalivedInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKeepalivedInterfaceMockRecorder
}

// MockKeepalivedInterfaceMockRecorder is the mock recorder for MockKeepalivedInterface
type MockKeepalivedInterfaceMockRecorder struct {
	mock *MockKeepalivedInterface
}

// NewMockKeepalivedInterface creates a new mock instance
func NewMockKeepalivedInterface(ctrl *gomock.Controller) *MockKeepalivedInterface {
	mock := &MockKeepalivedInterface{ctrl: ctrl}
	mock.recorder = &MockKeepalivedInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeepalivedInterface) EXPECT() *MockKeepalivedInterfaceMockRecorder {
	return m.recorder
}

// NewFarmForInstance mocks base method
func (m *MockKeepalivedInterface) NewFarmForInstance(arg0 *proto.Server) error {
	ret := m.ctrl.Call(m, "NewFarmForInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewFarmForInstance indicates an expected call of NewFarmForInstance
func (mr *MockKeepalivedInterfaceMockRecorder) NewFarmForInstance(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFarmForInstance", reflect.TypeOf((*MockKeepalivedInterface)(nil).NewFarmForInstance), arg0)
}

// DeleteFarmInInstance mocks base method
func (m *MockKeepalivedInterface) DeleteFarmInInstance(arg0 *proto.Server) error {
	ret := m.ctrl.Call(m, "DeleteFarmInInstance", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFarmInInstance indicates an expected call of DeleteFarmInInstance
func (mr *MockKeepalivedInterfaceMockRecorder) DeleteFarmInInstance(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFarmInInstance", reflect.TypeOf((*MockKeepalivedInterface)(nil).DeleteFarmInInstance), arg0)
}

// LoadInitData mocks base method
func (m *MockKeepalivedInterface) LoadInitData(arg0 *proto.InitAgentData) error {
	ret := m.ctrl.Call(m, "LoadInitData", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadInitData indicates an expected call of LoadInitData
func (mr *MockKeepalivedInterfaceMockRecorder) LoadInitData(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadInitData", reflect.TypeOf((*MockKeepalivedInterface)(nil).LoadInitData), arg0)
}

// reloadEngine mocks base method
func (m *MockKeepalivedInterface) reloadEngine() error {
	ret := m.ctrl.Call(m, "reloadEngine")
	ret0, _ := ret[0].(error)
	return ret0
}

// reloadEngine indicates an expected call of reloadEngine
func (mr *MockKeepalivedInterfaceMockRecorder) reloadEngine() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "reloadEngine", reflect.TypeOf((*MockKeepalivedInterface)(nil).reloadEngine))
}

// StartEngine mocks base method
func (m *MockKeepalivedInterface) StartEngine() error {
	ret := m.ctrl.Call(m, "StartEngine")
	ret0, _ := ret[0].(error)
	return ret0
}

// StartEngine indicates an expected call of StartEngine
func (mr *MockKeepalivedInterfaceMockRecorder) StartEngine() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEngine", reflect.TypeOf((*MockKeepalivedInterface)(nil).StartEngine))
}

// ReloadEngine mocks base method
func (m *MockKeepalivedInterface) ReloadEngine() error {
	ret := m.ctrl.Call(m, "ReloadEngine")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadEngine indicates an expected call of ReloadEngine
func (mr *MockKeepalivedInterfaceMockRecorder) ReloadEngine() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadEngine", reflect.TypeOf((*MockKeepalivedInterface)(nil).ReloadEngine))
}

// StopEngine mocks base method
func (m *MockKeepalivedInterface) StopEngine() {
	m.ctrl.Call(m, "StopEngine")
}

// StopEngine indicates an expected call of StopEngine
func (mr *MockKeepalivedInterfaceMockRecorder) StopEngine() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEngine", reflect.TypeOf((*MockKeepalivedInterface)(nil).StopEngine))
}
