// Code generated by MockGen. DO NOT EDIT.
// Source: nativelb.go

// Package kubecli is a generated GoMock package.
package kubecli

import (
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/k8s-nativelb/pkg/apis/nativelb/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	kubernetes "k8s.io/client-go/kubernetes"
	record "k8s.io/client-go/tools/record"
	reflect "reflect"
	client "sigs.k8s.io/controller-runtime/pkg/client"
	manager "sigs.k8s.io/controller-runtime/pkg/manager"
)

// MockNativelbClient is a mock of NativelbClient interface
type MockNativelbClient struct {
	ctrl     *gomock.Controller
	recorder *MockNativelbClientMockRecorder
}

// MockNativelbClientMockRecorder is the mock recorder for MockNativelbClient
type MockNativelbClientMockRecorder struct {
	mock *MockNativelbClient
}

// NewMockNativelbClient creates a new mock instance
func NewMockNativelbClient(ctrl *gomock.Controller) *MockNativelbClient {
	mock := &MockNativelbClient{ctrl: ctrl}
	mock.recorder = &MockNativelbClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNativelbClient) EXPECT() *MockNativelbClientMockRecorder {
	return m.recorder
}

// Cluster mocks base method
func (m *MockNativelbClient) Cluster() ClusterInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(ClusterInterface)
	return ret0
}

// Cluster indicates an expected call of Cluster
func (mr *MockNativelbClientMockRecorder) Cluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*MockNativelbClient)(nil).Cluster))
}

// Farm mocks base method
func (m *MockNativelbClient) Farm() FarmInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Farm")
	ret0, _ := ret[0].(FarmInterface)
	return ret0
}

// Farm indicates an expected call of Farm
func (mr *MockNativelbClientMockRecorder) Farm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Farm", reflect.TypeOf((*MockNativelbClient)(nil).Farm))
}

// Backend mocks base method
func (m *MockNativelbClient) Backend() BackendInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backend")
	ret0, _ := ret[0].(BackendInterface)
	return ret0
}

// Backend indicates an expected call of Backend
func (mr *MockNativelbClientMockRecorder) Backend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backend", reflect.TypeOf((*MockNativelbClient)(nil).Backend))
}

// Server mocks base method
func (m *MockNativelbClient) Server() ServerInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Server")
	ret0, _ := ret[0].(ServerInterface)
	return ret0
}

// Server indicates an expected call of Server
func (mr *MockNativelbClientMockRecorder) Server() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Server", reflect.TypeOf((*MockNativelbClient)(nil).Server))
}

// Agent mocks base method
func (m *MockNativelbClient) Agent() AgentInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Agent")
	ret0, _ := ret[0].(AgentInterface)
	return ret0
}

// Agent indicates an expected call of Agent
func (mr *MockNativelbClientMockRecorder) Agent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Agent", reflect.TypeOf((*MockNativelbClient)(nil).Agent))
}

// GetManager mocks base method
func (m *MockNativelbClient) GetManager() manager.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManager")
	ret0, _ := ret[0].(manager.Manager)
	return ret0
}

// GetManager indicates an expected call of GetManager
func (mr *MockNativelbClientMockRecorder) GetManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManager", reflect.TypeOf((*MockNativelbClient)(nil).GetManager))
}

// GetClient mocks base method
func (m *MockNativelbClient) GetClient() client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(client.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient
func (mr *MockNativelbClientMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockNativelbClient)(nil).GetClient))
}

// GetScheme mocks base method
func (m *MockNativelbClient) GetScheme() *runtime.Scheme {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheme")
	ret0, _ := ret[0].(*runtime.Scheme)
	return ret0
}

// GetScheme indicates an expected call of GetScheme
func (mr *MockNativelbClientMockRecorder) GetScheme() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheme", reflect.TypeOf((*MockNativelbClient)(nil).GetScheme))
}

// GetRecorder mocks base method
func (m *MockNativelbClient) GetRecorder(name string) record.EventRecorder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecorder", name)
	ret0, _ := ret[0].(record.EventRecorder)
	return ret0
}

// GetRecorder indicates an expected call of GetRecorder
func (mr *MockNativelbClientMockRecorder) GetRecorder(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecorder", reflect.TypeOf((*MockNativelbClient)(nil).GetRecorder), name)
}

// GetKubeClient mocks base method
func (m *MockNativelbClient) GetKubeClient() *kubernetes.Clientset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKubeClient")
	ret0, _ := ret[0].(*kubernetes.Clientset)
	return ret0
}

// GetKubeClient indicates an expected call of GetKubeClient
func (mr *MockNativelbClientMockRecorder) GetKubeClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKubeClient", reflect.TypeOf((*MockNativelbClient)(nil).GetKubeClient))
}

// MockClusterInterface is a mock of ClusterInterface interface
type MockClusterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClusterInterfaceMockRecorder
}

// MockClusterInterfaceMockRecorder is the mock recorder for MockClusterInterface
type MockClusterInterfaceMockRecorder struct {
	mock *MockClusterInterface
}

// NewMockClusterInterface creates a new mock instance
func NewMockClusterInterface(ctrl *gomock.Controller) *MockClusterInterface {
	mock := &MockClusterInterface{ctrl: ctrl}
	mock.recorder = &MockClusterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterInterface) EXPECT() *MockClusterInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockClusterInterface) Get(name string) (*v1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockClusterInterfaceMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterInterface)(nil).Get), name)
}

// List mocks base method
func (m *MockClusterInterface) List(opts *client.ListOptions) (*v1.ClusterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(*v1.ClusterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockClusterInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterInterface)(nil).List), opts)
}

// Create mocks base method
func (m *MockClusterInterface) Create(instance *v1.Cluster) (*v1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", instance)
	ret0, _ := ret[0].(*v1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockClusterInterfaceMockRecorder) Create(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterInterface)(nil).Create), instance)
}

// Update mocks base method
func (m *MockClusterInterface) Update(arg0 *v1.Cluster) (*v1.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v1.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockClusterInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterInterface)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockClusterInterface) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockClusterInterfaceMockRecorder) Delete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterInterface)(nil).Delete), name)
}

// MockFarmInterface is a mock of FarmInterface interface
type MockFarmInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFarmInterfaceMockRecorder
}

// MockFarmInterfaceMockRecorder is the mock recorder for MockFarmInterface
type MockFarmInterfaceMockRecorder struct {
	mock *MockFarmInterface
}

// NewMockFarmInterface creates a new mock instance
func NewMockFarmInterface(ctrl *gomock.Controller) *MockFarmInterface {
	mock := &MockFarmInterface{ctrl: ctrl}
	mock.recorder = &MockFarmInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFarmInterface) EXPECT() *MockFarmInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockFarmInterface) Get(name string) (*v1.Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1.Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockFarmInterfaceMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFarmInterface)(nil).Get), name)
}

// List mocks base method
func (m *MockFarmInterface) List(opts *client.ListOptions) (*v1.FarmList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(*v1.FarmList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockFarmInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFarmInterface)(nil).List), opts)
}

// Create mocks base method
func (m *MockFarmInterface) Create(instance *v1.Farm) (*v1.Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", instance)
	ret0, _ := ret[0].(*v1.Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockFarmInterfaceMockRecorder) Create(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFarmInterface)(nil).Create), instance)
}

// Update mocks base method
func (m *MockFarmInterface) Update(arg0 *v1.Farm) (*v1.Farm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v1.Farm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockFarmInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFarmInterface)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockFarmInterface) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockFarmInterfaceMockRecorder) Delete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFarmInterface)(nil).Delete), name)
}

// MockBackendInterface is a mock of BackendInterface interface
type MockBackendInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBackendInterfaceMockRecorder
}

// MockBackendInterfaceMockRecorder is the mock recorder for MockBackendInterface
type MockBackendInterfaceMockRecorder struct {
	mock *MockBackendInterface
}

// NewMockBackendInterface creates a new mock instance
func NewMockBackendInterface(ctrl *gomock.Controller) *MockBackendInterface {
	mock := &MockBackendInterface{ctrl: ctrl}
	mock.recorder = &MockBackendInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBackendInterface) EXPECT() *MockBackendInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockBackendInterface) Get(name string) (*v1.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBackendInterfaceMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBackendInterface)(nil).Get), name)
}

// List mocks base method
func (m *MockBackendInterface) List(opts *client.ListOptions) (*v1.BackendList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(*v1.BackendList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockBackendInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBackendInterface)(nil).List), opts)
}

// Create mocks base method
func (m *MockBackendInterface) Create(instance *v1.Backend) (*v1.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", instance)
	ret0, _ := ret[0].(*v1.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockBackendInterfaceMockRecorder) Create(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBackendInterface)(nil).Create), instance)
}

// Update mocks base method
func (m *MockBackendInterface) Update(arg0 *v1.Backend) (*v1.Backend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v1.Backend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockBackendInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBackendInterface)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockBackendInterface) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBackendInterfaceMockRecorder) Delete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBackendInterface)(nil).Delete), name)
}

// MockServerInterface is a mock of ServerInterface interface
type MockServerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServerInterfaceMockRecorder
}

// MockServerInterfaceMockRecorder is the mock recorder for MockServerInterface
type MockServerInterfaceMockRecorder struct {
	mock *MockServerInterface
}

// NewMockServerInterface creates a new mock instance
func NewMockServerInterface(ctrl *gomock.Controller) *MockServerInterface {
	mock := &MockServerInterface{ctrl: ctrl}
	mock.recorder = &MockServerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServerInterface) EXPECT() *MockServerInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockServerInterface) Get(name string) (*v1.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockServerInterfaceMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServerInterface)(nil).Get), name)
}

// List mocks base method
func (m *MockServerInterface) List(opts *client.ListOptions) (*v1.ServerList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(*v1.ServerList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockServerInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServerInterface)(nil).List), opts)
}

// Create mocks base method
func (m *MockServerInterface) Create(instance *v1.Server) (*v1.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", instance)
	ret0, _ := ret[0].(*v1.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockServerInterfaceMockRecorder) Create(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServerInterface)(nil).Create), instance)
}

// Update mocks base method
func (m *MockServerInterface) Update(arg0 *v1.Server) (*v1.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v1.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockServerInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServerInterface)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockServerInterface) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockServerInterfaceMockRecorder) Delete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServerInterface)(nil).Delete), name)
}

// MockAgentInterface is a mock of AgentInterface interface
type MockAgentInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAgentInterfaceMockRecorder
}

// MockAgentInterfaceMockRecorder is the mock recorder for MockAgentInterface
type MockAgentInterfaceMockRecorder struct {
	mock *MockAgentInterface
}

// NewMockAgentInterface creates a new mock instance
func NewMockAgentInterface(ctrl *gomock.Controller) *MockAgentInterface {
	mock := &MockAgentInterface{ctrl: ctrl}
	mock.recorder = &MockAgentInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgentInterface) EXPECT() *MockAgentInterfaceMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockAgentInterface) Get(name string) (*v1.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*v1.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAgentInterfaceMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAgentInterface)(nil).Get), name)
}

// List mocks base method
func (m *MockAgentInterface) List(opts *client.ListOptions) (*v1.AgentList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].(*v1.AgentList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockAgentInterfaceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAgentInterface)(nil).List), opts)
}

// Create mocks base method
func (m *MockAgentInterface) Create(instance *v1.Agent) (*v1.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", instance)
	ret0, _ := ret[0].(*v1.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockAgentInterfaceMockRecorder) Create(instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAgentInterface)(nil).Create), instance)
}

// Update mocks base method
func (m *MockAgentInterface) Update(arg0 *v1.Agent) (*v1.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v1.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockAgentInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAgentInterface)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockAgentInterface) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAgentInterfaceMockRecorder) Delete(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAgentInterface)(nil).Delete), name)
}
