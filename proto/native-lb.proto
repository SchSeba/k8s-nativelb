syntax = "proto3";

package proto;

import "google/protobuf/duration.proto";

service NativeLoadBalancerAgent {
    rpc CreateServers(Data) returns (Result) {}
    rpc UpdateServers(Data) returns (Result) {}
    rpc DeleteServers(Data) returns (Result) {}
    rpc InitAgent(InitAgentData) returns (InitAgentResult) {}
    rpc GetAgentStatus(Command) returns (AgentStatus) {}
    rpc GetServerStats(Command) returns (ServerStats) {}
    rpc UpdateAgentSyncVersion(InitAgentData) returns (Result) {}
}

message InitAgentData {
    int32 SyncVersion = 1;
    repeated Data Data = 2;
}

message InitAgentResult {
    Agent Agent = 1;
    AgentStatus AgentStatus = 2;
}

message Data {
    string FarmName = 1;
    // Keepalived Parameters
    string Namespace = 2;
    string KeepalivedState = 3;
    int32 RouterID = 4;
    int32 Priority = 5;
    repeated Server Servers = 6;
}

message Agent {
    string HostName = 1;
    string IPAddress = 2;
    int32 Port = 3;
    string ControlInterface = 4;
    string SyncInterface = 5;
    string DataInterface = 6;
    string Cluster = 7;
}

message AgentStatus {
    string Name = 1;
    int32 LBPid = 2;
    int32 KeepAlivedPid = 3;
    string StartTime = 4;
    string Time = 5;
    google.protobuf.Duration Uptime = 6;
    string Version = 7;
    string Status = 8;
    int32 SyncVersion = 9;
}

message ServerStats {
    string Name = 1;
    int32 ActiveConnections = 2;
    int32 RxTotal = 3;
    int32 TxTotal = 4;
    int32 RxSecond  = 5;
    int32 TxSecond  = 6;
    repeated Backend Backends = 7;
}

message Server {
    // LoadBalancer Parameters
    string Bind = 1;
    string Protocol = 2;
    int32 Port = 3;
    UDP UDP = 4;
    string Balance = 5;
    int32 MaxConnections = 6;
    string ClientIdleTimeout = 7;
    string BackendIdleTimeout = 8;
    string BackendConnectionTimeout = 9;
    Discovery Discovery = 10;
    HealthCheck HealthCheck = 11;
}

message Discovery {
    string Kind = 1;
    repeated BackendSpec BackendSpec = 2;
}

message HealthCheck {
    int32 Fails = 1;
    int32 Passes = 2;
    string Interval = 3;
    string Timeout = 4;
    string Kind = 5;
    string PingTimeoutDuration = 6;
}

message UDP {
    int32 MaxRequests = 1;
    int32 MaxResponses = 2;
}

message Backend {
    BackendSpec BackendSpec = 1;
    BackendStatus BackendStatus = 2;
}

message BackendSpec {
    string Host = 1;
    int32 Port = 2;
    int32 Priority = 3;
    int32 Weight = 4;
}

message  BackendStatus {
    bool Live = 1;
    int32 TotalConnections = 2;
    int32 ActiveConnections = 3;
    int32 RefusedConnections = 4;
    int32 Rx = 5;
    int32 Tx = 6;
    int32 RxSecond = 7;
    int32 TxSecond =8;
}

message Command {}
message Result {}